---
- name: Include default configuration
  include_vars: "default.yml"
  when: 'kodi_include_default_config | default(False) | bool'
  tags:
  - install
  - configure

# tasks file for kodi-ansible-role
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"
  tags:
  - install
  - configure

- name: Set kodi_user to osmc (OSMC)
  set_fact:
    kodi_user: "osmc"
  when: "ansible_distribution == 'OSMC'"

- name: Create Kodi user
  user:
    name: "{{ kodi_user }}"
    shell: "{{ kodi_shell }}"
    groups: "{{ kodi_groups }}"
    append: True
  when: "ansible_distribution != 'LibreELEC' and ansible_distribution != 'OSMC'"
  tags:
  - configure
  - get_addons
  - copy_addon_settings

# changing Kodi configuration while Kodi is running is
# not supported so let's make sure it's stopped before we
# continue
- name: Check if Kodi is running
  shell:
    cmd: "{{ check_kodi_process[ansible_os_family].cmd }}"
    executable: "{{ check_kodi_process[ansible_os_family].executable }}"
  register: kodi_running
  ignore_errors: True
  vars:
    check_kodi_process:
      'Debian': {cmd: "ps -U {{ kodi_user }} -o command | grep -e '^/usr/lib/.*kodi.bin' -e '^/usr/lib/.*kodi-rbpi'", executable: "/bin/bash"}
      'Ubuntu': {cmd: "ps -U {{ kodi_user }} -o command | grep '^/usr/lib/.*kodi.bin'", executable: "/bin/bash"}
      'Archlinux': {cmd: "ps -U {{ kodi_user }} -o command | grep -q ^/usr/lib/kodi/[k]odi", executable: "/usr/bin/bash"}
      'LibreELEC': {cmd: "ps ux | grep -wq [k]odi.bin", executable: "/usr/bin/sh"}
      'OSMC': {cmd: "ps -U {{ kodi_user }} -o command | grep '^/usr/lib/.*kodi.bin'", executable: "/bin/bash"}
  tags:
  - configure
  check_mode: no

- name: Stop Kodi via service (LibreELEC)
  systemd:
    name: kodi
    state: stopped
  when: "kodi_running.rc == 0 and ansible_distribution == 'LibreELEC'"
  tags:
  - configure

- name: Stop Kodi via service (OSMC)
  systemd:
    name: mediacenter
    state: stopped
  when: "kodi_running.rc == 0 and ansible_distribution == 'OSMC'"
  tags:
  - configure

- name: Stop Kodi
  fail:
    msg: "Stop Kodi prior to executing this playbook"
  when: "kodi_running.rc == 0 and ansible_distribution != 'LibreELEC' and ansible_distribution != 'OSMC'"
  tags:
  - configure

# Setup apt repo (Ubuntu only)"
- name: Add Kodi ppa
  apt_repository:
    repo: "ppa:team-xbmc/ppa"
  when: "ansible_distribution == 'Ubuntu'"
  tags:
  - install

- name: Install Kodi and related apps
  package:
    name: "{{ packages }}"
  when: "ansible_distribution != 'LibreELEC'"
  tags:
  - install

- name: Query Kodi (major) version
  shell: "{{ kodi_query_version[ansible_os_family] }}"
  register: kodi_version
  vars:
    kodi_query_version:
      'Debian': "dpkg -s kodi | awk -F: '/^Version:/{print $3}'"
      'Ubuntu': "dpkg -s kodi | awk -F: '/^Version:/{print $3}'"
      'Archlinux': "pacman -Q kodi | awk '{print $2}'"
      'LibreELEC': "/usr/lib/kodi/kodi.bin --version | grep -om1 '[[:digit:]]\\+\\(\\.[[:digit:]]\\+\\)\\+' | sort -r -V | head -1"
      'OSMC': "/usr/lib/kodi/kodi.bin --version | grep -om1 '[[:digit:]]\\+\\(\\.[[:digit:]]\\+\\)\\+' | sort -r -V | head -1"
  check_mode: no
  tags:
  - get_addons

- name: Set Kodi version as ansible fact
  set_fact:
    kodi_version: "{{ kodi_version.stdout }}"
  tags:
  - get_addons

- name: Show Kodi version
  debug:
    msg: "kodi version: {{ kodi_version }}"
  tags:
  - get_addons

- name: Create Kodi dirs
  file:
    state: directory
    path: "~{{ kodi_user }}/.kodi/addons/"
    owner: "{{ kodi_user }}"
  tags:
  - configure
  - get_addons

- name: Get Kodi addons
  script:
    cmd: "get_kodi_addon.sh {{ item | quote }} {{ kodi_version | quote }}"
  with_items: "{{ kodi_addon_names }}"
  become_user: "{{ kodi_user }}"
  become: True
  environment:
    REPOSITORIES: "{{ kodi_repositories | map('quote') | list | join(' ') }}"
    ENABLED_REPOSITORIES: "{{ kodi_enabled_repositories | map('quote') | list | join(' ') }}"
  tags:
  - get_addons

- name: Set permissions on .kodi/
  file:
    path: "~{{ kodi_user }}/.kodi"
    owner: "{{ kodi_user }}"
  tags:
  - configure
  - get_addons

- name: Get addons for upload
  set_fact:
    kodi_addons_upload: "{{ (kodi_addons_upload | default([])) + ([lookup('first_found', ('addons/' + item), skip=True)] | flatten) }}"
  with_items: "{{ kodi_addon_names | select('match', '^repository.') | list }}"

- name: Copy Kodi repository addons
  copy:
    src: "{{ item }}"
    dest: "~{{ kodi_user }}/.kodi/addons"
    owner: "{{ kodi_user }}"
  tags:
  - get_addons
  with_items: "{{ kodi_addons_upload | default([]) }}"

- name: Get addon settings for upload
  set_fact:
    kodi_addon_settings_upload: "{{ (kodi_addon_settings_upload | default([])) + ([lookup('first_found', ('addon_data/' + item), skip=True)] | flatten) }}"
  with_items: "{{ kodi_addon_names }}"

- name: Copy addon settings
  copy:
    src: "{{ item }}"
    dest: "~{{ kodi_user }}/.kodi/userdata/addon_data"
    owner: "{{ kodi_user }}"
  with_items: "{{ kodi_addon_settings_upload | default([]) }}"
  tags:
  - copy_addon_settings

- name: Create directories for xml files
  file:
    path: "~{{ kodi_user }}/.kodi/{{ item }}"
    state: directory
  with_items: "{{ kodi_config_final | map(attribute='file') | map('dirname') | unique }}"
  tags: configure

- name: Check if xml config files exist
  stat:
    path: "~{{ kodi_user }}/.kodi/{{ item }}"
  with_items: "{{ kodi_config_final | map(attribute='file') | unique }}"
  tags: configure
  register: stat_result

- name: Create empty xml setting file if needed
  copy:
    content: "<settings></settings>"
    dest: "~{{ kodi_user }}/.kodi/{{ item }}"
  with_items: "{{ stat_result.results
                  | selectattr('stat.exists', 'false')
                  | map(attribute='item')
                  | list }}"
  tags: configure

- include: configure.yml
  when: "ansible_distribution != 'LibreELEC'"

- include: configure_libreelec.yml
  when: "ansible_distribution == 'LibreELEC'"

- name: Show message to LibreELEC users
  debug:
    msg: "Update addons Kodi inside Kodi"
  when: "ansible_distribution == 'LibreELEC'"

- name: Apply correct ownership to ~/.kodi
  file:
    path: "~{{ kodi_user }}/.kodi"
    state: directory
    recurse: True
    owner: "{{ kodi_user }}"
  tags:
  - configure
  - copy_addon_settings
  - get_addons

- name: Slurp favourites from master installation
  slurp:
    src: "~{{ kodi_master_kodi_user }}/.kodi/userdata/favourites.xml"
  register: favourites
  delegate_to: "{{ kodi_master_installation }}"
  when: kodi_copy_favourites
  tags: transfer_favourites

- name: Slurp RSS feeds from master installation
  slurp:
    src: "~{{ kodi_master_kodi_user }}/.kodi/userdata/RssFeeds.xml"
  register: rssfeeds
  delegate_to: "{{ kodi_master_installation }}"
  when: kodi_copy_feeds
  tags: transfer_feeds

- name: Transfer favourites from master installation
  copy:
    content: "{{ favourites['content'] | b64decode }}"
    dest: "~{{ kodi_user }}/.kodi/userdata/favourites.xml"
    backup: True
  when: kodi_copy_favourites
  tags: transfer_favourites

- name: Transfer RSS feeds from master installation
  copy:
    content: "{{ favourites['content'] | b64decode }}"
    dest: "~{{ kodi_user }}/.kodi/userdata/RSSFeeds.xml"
    backup: True
  when: kodi_copy_feeds
  tags: transfer_feeds

- name: Start Kodi via service (LibreELEC)
  systemd:
    name: kodi
    state: started
  when: "ansible_distribution == 'LibreELEC'"
  tags:
  - configure

- name: Start Kodi via service (OSMC)
  systemd:
    name: mediacenter
    state: started
  when: "ansible_distribution == 'OSMC'"
  tags:
  - configure
