---
- name: Include default configuration
  include_vars: "default.yml"
  when: 'kodi_include_default_config | default(False) | bool'
  tags:
  - install
  - configure

# tasks file for kodi-ansible-role
- name: Include OS-specific variables.
  include_vars: "{{ item }}"
  with_first_found:
  - files:
    - "{{ ansible_os_family }}.yml"
    - "fallback.yml"
  tags:
  - install
  - configure

- name: Create Kodi user
  user:
    name: "{{ kodi_user }}"
    shell: "{{ kodi_shell }}"
    groups: "{{ kodi_groups }}"
    append: True
  when: 'kodi_user_create | default(True) | bool'
  tags:
  - configure
  - get_addons
  - copy_addon_settings

# changing Kodi configuration while Kodi is running is
# not supported so let's make sure it's stopped before we
# continue
- name: Stop Kodi via service
  systemd:
    name: "{{ kodi_systemd_service }}"
    state: stopped
  when: "kodi_systemd_service is defined"
  tags:
  - configure

- when: "kodi_systemd_service is not defined"
  block:
  - name: Ensure that Kodi process-checking variables are defined
    assert:
      that:
      - "kodi_check_process_cmd is defined"
      - "kodi_check_process_executable is defined"
      msg: "Please define the variables 'kodi_check_process_cmd' and 'kodi_check_process_executable'."
    tags:
    - configure

  - name: Check if Kodi is running
    shell:
      cmd: "{{ kodi_check_process_cmd | mandatory }}"
      executable: "{{ kodi_check_process_executable | mandatory }}"
    register: kodi_running
    ignore_errors: True
    tags:
    - configure
    check_mode: no

  - name: Stop Kodi
    fail:
      msg: "Stop Kodi prior to executing this playbook"
    when: "(kodi_running.rc | default(0)) == 0"
    tags:
    - configure

# Setup apt repo (Ubuntu only)"
- name: Add Kodi ppa
  apt_repository:
    repo: "ppa:team-xbmc/ppa"
  when: "ansible_distribution == 'Ubuntu'"
  tags:
  - install

- name: Install Kodi and related apps
  package:
    name: "{{ packages | default([]) }}"
  when: "(packages | default([]) | length) > 0"
  tags:
  - install

- when: 'kodi_version is not defined'
  block:
  - name: Query Kodi (major) version
    shell:
      cmd: "{{ kodi_query_version_cmd | mandatory }}"
      executable: "{{ kodi_query_version_executable | mandatory }}"
    register: kodi_query_version_result
    check_mode: no
    tags:
    - get_addons

  - name: Set Kodi version as ansible fact
    set_fact:
      kodi_version: "{{ kodi_query_version_result.stdout }}"
    tags:
    - get_addons

- name: Show Kodi version
  debug:
    msg: "kodi version: {{ kodi_version }}"
  tags:
  - get_addons

- name: Create Kodi dirs
  file:
    state: directory
    path: "{{ kodi_data_dir }}/addons/"
    owner: "{{ kodi_user }}"
  tags:
  - configure
  - get_addons

- name: Get Kodi addons
  script:
    cmd: "get_kodi_addon.sh {{ item | quote }} {{ kodi_version | quote }}"
  with_items: "{{ kodi_addons }}"
  become_user: "{{ kodi_user }}"
  become: True
  environment:
    # Pass through the Python interpreter value in order to use this Python as
    # a fallback for powering the XML munging in `get_kodi_addon.sh`.
    ANSIBLE_PYTHON_INTERPRETER: "{{ ansible_python.executable | default(ansible_python_interpreter) }}"
    REPOSITORIES: "{{ kodi_repositories | map('quote') | list | join(' ') }}"
    ENABLED_REPOSITORIES: "{{ kodi_enabled_repositories | map('quote') | list | join(' ') }}"
    KODI_USER: "{{ kodi_user }}"
    KODI_DATA_DIR: "{{ kodi_data_dir }}"
  tags:
  - get_addons

- name: Set permissions on Kodi data directory
  file:
    path: "{{ kodi_data_dir }}"
    owner: "{{ kodi_user }}"
  tags:
  - configure
  - get_addons

- name: Get addons for upload
  set_fact:
    kodi_addons_upload: "{{ (kodi_addons_upload | default([])) + ([lookup('first_found', ('addons/' + item), skip=True)] | flatten) }}"
  with_items: "{{ kodi_addon_names | select('match', '^repository.') | list }}"

- name: Copy Kodi repository addons
  copy:
    src: "{{ item }}"
    dest: "{{ kodi_data_dir }}/addons"
    owner: "{{ kodi_user }}"
  tags:
  - get_addons
  with_items: "{{ kodi_addons_upload | default([]) }}"

- name: Get addon settings for upload
  set_fact:
    kodi_addon_settings_upload: "{{ (kodi_addon_settings_upload | default([])) + ([lookup('first_found', ('addon_data/' + item), skip=True)] | flatten) }}"
  with_items: "{{ kodi_addon_names }}"

- name: Copy addon settings
  copy:
    src: "{{ item }}"
    dest: "{{ kodi_data_dir }}/userdata/addon_data"
    owner: "{{ kodi_user }}"
  with_items: "{{ kodi_addon_settings_upload | default([]) }}"
  tags:
  - copy_addon_settings

- name: Create directories for xml files
  file:
    path: "{{ kodi_data_dir }}/{{ item }}"
    state: directory
  with_items: "{{ kodi_config_final | map(attribute='file') | map('dirname') | unique }}"
  tags: configure

- name: Check if xml config files exist
  stat:
    path: "{{ kodi_data_dir }}/{{ item }}"
  with_items: "{{ kodi_config_final | map(attribute='file') | unique }}"
  tags: configure
  register: stat_result

- name: Create empty xml setting file if needed
  copy:
    content: "<settings></settings>"
    dest: "{{ kodi_data_dir }}/{{ item }}"
  with_items: "{{ stat_result.results | selectattr('stat.exists', 'false') | map(attribute='item') | list }}"
  tags: configure

- block:
  - name: "Test if Ansible 'xml' module prerequisites are available"
    command: "{{ ansible_python.executable | default(ansible_python_interpreter) | quote }} -c 'import lxml'"
    changed_when: False
    tags: configure
  - include: configure.yml
  rescue:
  - include: configure_libreelec.yml

- name: Apply correct ownership to Kodi data directory
  file:
    path: "{{ kodi_data_dir }}"
    state: directory
    recurse: True
    owner: "{{ kodi_user }}"
  tags:
  - configure
  - copy_addon_settings
  - get_addons

- name: Slurp favourites from master installation
  slurp:
    src: "{{ kodi_master_kodi_data_dir }}/userdata/favourites.xml"
  register: favourites
  delegate_to: "{{ kodi_master_installation }}"
  when: 'kodi_copy_favourites | default(False) | bool'
  tags: transfer_favourites

- name: Slurp RSS feeds from master installation
  slurp:
    src: "{{ kodi_master_kodi_data_dir }}/userdata/RssFeeds.xml"
  register: rssfeeds
  delegate_to: "{{ kodi_master_installation }}"
  when: 'kodi_copy_feeds | default(False) | bool'
  tags: transfer_feeds

- name: Transfer favourites from master installation
  copy:
    content: "{{ favourites['content'] | b64decode }}"
    dest: "{{ kodi_data_dir }}/userdata/favourites.xml"
    backup: True
  when: 'kodi_copy_favourites | default(False) | bool'
  tags: transfer_favourites

- name: Transfer RSS feeds from master installation
  copy:
    content: "{{ favourites['content'] | b64decode }}"
    dest: "{{ kodi_data_dir }}/userdata/RSSFeeds.xml"
    backup: True
  when: 'kodi_copy_feeds | default(True) | bool'
  tags: transfer_feeds

- name: Start Kodi via service
  systemd:
    name: "{{ kodi_systemd_service }}"
    state: started
  when: "kodi_systemd_service is defined"
  tags:
  - configure
