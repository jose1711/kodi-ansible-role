---
- name: Include default configuration
  include_vars: "default.yml"
  when: 'kodi_include_default_config | default(False) | bool'
  tags:
  - always

# tasks file for kodi-ansible-role
- name: Include OS-specific variables.
  include_vars: "{{ item }}"
  with_first_found:
  - files:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "fallback.yml"
  tags:
  - always

# Setup apt repo (Pre-Lunar-Lobster-Ubuntu only)
#
# On Lunar Lobster, PPA does not provide anything other than Kodi.  On
# earlier Ubuntu releases, it provides many Kodi addons in addition to Kodi
# itself.
#
# XXX the PPA appears to be unmaintained:
# https://forum.kodi.tv/showthread.php?tid=374957&pid=3171140#pid3171140
# https://forum.kodi.tv/showthread.php?tid=375305&pid=3174722#pid3174722
- when:
  - "ansible_distribution == 'Ubuntu'"
  - "ansible_distribution_major_version is version_compare('23', '<')"
  block:
  - name: Create apt trusted keys drop-in directory
    file:
      path: "/etc/apt/keyrings"
      state: directory
      owner: root
      group: root
      mode: "0755"
    tags:
    - install
    - get_addons

  - name: Install the Kodi ppa public key
    get_url:
      url: "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x189701da570c56b9488ef60a6d975c4791e7ee5e"
      dest: "/etc/apt/keyrings/team-xbmc.asc"
      owner: root
      group: root
      mode: "0644"
      force: True
    tags:
    - install
    - get_addons

  - name: Add Kodi ppa
    apt_repository:
      repo: "deb [signed-by=/etc/apt/keyrings/team-xbmc.asc] https://ppa.launchpadcontent.net/team-xbmc/ppa/ubuntu {{ ansible_distribution_release }} main"
    tags:
    - install
    - get_addons

- name: Install Kodi and related apps
  package:
    name: "{{ (packages | default([])) + (kodi_extra_packages | default([])) }}"
    state: present
  when: "(((packages | default([])) + (kodi_extra_packages | default([]))) | length) > 0"
  tags:
  - install
  - get_addons

# The default value of `kodi_groups` is `["audio", "video", "input"]`.  On
# explicitly-supported distributions, all of these groups are usually present
# on a base/stock installation.  Exception: on Debian and Ubuntu, the `input`
# group is created by the post-installation script from the `udev` package,
# and the `udev` package is not installed by default in at least some Debian
# and Ubuntu container images.  So, ensure that the groups are created.
#
# Handles both:
#   1. `"foogroup"`, and
#   2. `{"name": "foogroup", "gid": 999, "system": False}`
# Plus degenerate cases of `2` (e.g. no `gid` or `system` attribute specified).
- name: "Create Kodi groups"
  group:
    name: "{{ (item is mapping) | ternary((item.name | default(omit)), item) }}"
    state: present
    system: "{{ (item is mapping) | ternary((item.system | default(True) | bool), True) }}"
    gid: "{{ (item is mapping) | ternary((item.gid | default(omit)), omit) }}"
  with_items: "{{ kodi_groups }}"
  # Some targets (e.g. LibreELEC) do not have `groupmod` and/or other
  # dependencies of the `group` module.  Ignore errors; if any entries in
  # `kodi_groups` are absent, the "Create Kodi user" task will fail.
  ignore_errors: True

- name: Create Kodi user
  user:
    name: "{{ kodi_user }}"
    shell: "{{ kodi_shell }}"
    groups: "{{ (kodi_groups | select('mapping') | map(attribute='name') | list) + (kodi_groups | reject('mapping') | list) }}"
    append: True
  when: 'kodi_user_create | default(True) | bool'
  tags:
  - configure
  - get_addons
  - copy_addon_settings

- name: Create Kodi dirs
  file:
    state: directory
    path: "{{ kodi_data_dir }}/addons/"
    owner: "{{ kodi_user }}"
  tags:
  - configure
  - get_addons

- name: "determine whether to manage Kodi as a service"
  set_fact:
    kodi_service_enabled: '{{
        kodi_service_enabled
      | default((kodi_service is defined) and (kodi_service is not none) and (kodi_service != omit))
    }}'
    kodi_systemd_service_enabled: '{{
          kodi_systemd_service_enabled
        | default((kodi_systemd_service is defined) and (kodi_systemd_service is not none) and (kodi_systemd_service != omit))
    }}'

- when: "kodi_systemd_service_enabled"
  block:
  - name: "Issue warning about variable deprecation"
    debug:
      msg: "`kodi_systemd_service` is deprecated; please use `kodi_service` instead"
  - name: "Check that we are not going to overwrite `kodi_service`"
    assert:
      that:
        - "(kodi_service is not defined) or (kodi_service == kodi_systemd_service)"
      msg: "`kodi_service` and `kodi_systemd_service` have conflicting definitions; please define only `kodi_service`"
  - name: "Set kodi_service variable"
    set_fact:
      kodi_service: "{{ kodi_systemd_service }}"
      kodi_service_enabled: "{{ kodi_systemd_service_enabled }}"

# changing Kodi configuration while Kodi is running is
# not supported so let's make sure it's stopped before we
# continue
- when: "kodi_service_enabled | bool"
  block:
  # Ensure the service is started so that Kodi populates the addon database and
  # performs other setup that may be required by addon installation and
  # configuration tasks.
  - when: "kodi_attempt_start | bool"
    block:
    - name: Start Kodi via service
      service:
        name: "{{ kodi_service | default(omit) }}"
        state: started
      register: kodi_start
      ignore_errors: True
      tags:
      - configure
      - get_addons

    - name: Let Kodi run for a bit
      wait_for:
        timeout: "{{ kodi_start_seconds | default(10) | int }}"
      when: 'kodi_start is changed'
      tags:
      - configure
      - get_addons

  - name: Stop Kodi via service
    service:
      name: "{{ kodi_service | default(omit) }}"
      state: stopped
    tags:
    - configure

- when: "not (kodi_service_enabled | bool)"
  block:
  - name: Ensure that Kodi process-checking variables are defined
    assert:
      that:
      - "kodi_check_process_cmd is defined"
      - "kodi_check_process_executable is defined"
      msg: "Please define the variables 'kodi_check_process_cmd' and 'kodi_check_process_executable'."
    tags:
    - configure

  - name: Check if Kodi is running
    shell:
      cmd: "{{ kodi_check_process_cmd | mandatory }}"
      executable: "{{ kodi_check_process_executable | mandatory }}"
    register: kodi_running
    ignore_errors: True
    tags:
    - configure
    check_mode: no

  - when: "(kodi_attempt_start | bool) and ((kodi_running.rc | default(0)) != 0)"
    block:
    # Needed in order to initialize addons that depend on "core" addons.
    - name: Attempt to start Kodi
      script:
        cmd: "start_kodi.sh"
        executable: "{{ kodi_check_process_executable | mandatory }}"
      environment:
        KODI_EXECUTABLE: "{{ kodi_executable }}"
      register: kodi_start
      become_user: "{{ kodi_user }}"
      become: True
      when: "(kodi_running.rc | default(0)) != 0"
      tags:
      - configure
      - get_addons
      check_mode: no

    - name: Let Kodi run for a bit
      wait_for:
        timeout: "{{ kodi_start_seconds | default(10) | int }}"
      tags:
      - configure
      - get_addons

  - name: Store Kodi PID
    set_fact:
      kodi_pid: "{{ ((kodi_start | default({})).stdout_lines | default([''])).0 }}"

  - when: "(kodi_attempt_stop | bool) and ((kodi_attempt_start | bool) or ((kodi_running.rc | default(0)) == 0))"
    block:
    - name: Attempt to stop Kodi (SIGTERM)
      script:
        cmd: "stop_kodi.sh"
        executable: "{{ kodi_check_process_executable | mandatory }}"
      environment:
        KODI_EXECUTABLE: "{{ kodi_executable }}"
        KODI_SEND_EXECUTABLE: "{{ kodi_send_executable }}"
        KODI_SEND_HOST: "{{ kodi_send_host }}"
        KODI_SEND_PORT: "{{ kodi_send_port }}"
        KODI_PID: "{{ kodi_pid }}"
        KODI_KILL_SIGNAL: TERM
      changed_when: False
      tags:
      - configure
      check_mode: no

    - name: Check if Kodi is running after killing with SIGTERM
      shell:
        cmd: "{{ kodi_check_process_cmd | mandatory }}"
        executable: "{{ kodi_check_process_executable | mandatory }}"
      register: kodi_running
      ignore_errors: True
      retries: "{{ kodi_stop_seconds | int }}"
      delay: 1
      until: "(kodi_running.rc | default(0)) != 0"
      tags:
      - configure
      check_mode: no

    - name: Attempt to stop Kodi (SIGHUP)
      script:
        cmd: "stop_kodi.sh"
        executable: "{{ kodi_check_process_executable | mandatory }}"
      environment:
        KODI_EXECUTABLE: "{{ kodi_executable }}"
        KODI_SEND_EXECUTABLE: "{{ kodi_send_executable }}"
        KODI_SEND_HOST: "{{ kodi_send_host }}"
        KODI_SEND_PORT: "{{ kodi_send_port }}"
        KODI_PID: "{{ kodi_pid }}"
        KODI_KILL_SIGNAL: HUP
      when: "(kodi_running.rc | default(0)) == 0"
      changed_when: False
      tags:
      - configure
      check_mode: no

    - name: Check if Kodi is running after killing with SIGHUP
      shell:
        cmd: "{{ kodi_check_process_cmd | mandatory }}"
        executable: "{{ kodi_check_process_executable | mandatory }}"
      register: kodi_running
      ignore_errors: True
      retries: "{{ kodi_stop_seconds | int }}"
      delay: 1
      until: "(kodi_running.rc | default(0)) != 0"
      tags:
      - configure
      check_mode: no

  - name: Stop playbook execution
    fail:
      msg: "Stop Kodi prior to executing this playbook"
    when: "(kodi_running.rc | default(0)) == 0"
    tags:
    - configure

- when: 'kodi_version is not defined'
  block:
  - name: Query Kodi (major) version
    shell:
      cmd: "{{ kodi_query_version_cmd | mandatory }}"
      executable: "{{ kodi_query_version_executable | mandatory }}"
    register: kodi_query_version_result
    check_mode: no
    tags:
    - get_addons

  - name: Set Kodi version as ansible fact
    set_fact:
      kodi_version: "{{ kodi_query_version_result.stdout }}"
    tags:
    - get_addons

- name: Show Kodi version
  debug:
    msg: "kodi version: {{ kodi_version }}"
  tags:
  - get_addons

- name: Get Kodi addons
  script:
    cmd: "get_kodi_addon.py --kodi-version {{ kodi_version | quote }} install {{ kodi_addons | map('quote') | join(' ') }}"
    # Use a known python interpreter rather than relying on (say) `/usr/bin/env python`.
    executable: "{{ ansible_python.executable | default(ansible_python_interpreter) }}"
  become_user: "{{ kodi_user }}"
  become: True
  environment:
    REPOSITORIES: "{{ kodi_repositories | map('quote') | list | join(' ') }}"
    ENABLED_REPOSITORIES: "{{ kodi_enabled_repositories | map('quote') | list | join(' ') }}"
    KODI_USER: "{{ kodi_user }}"
    KODI_DATA_DIR: "{{ kodi_data_dir }}"
    KODI_SEND_HOST: "{{ kodi_send_host }}"
    KODI_SEND_PORT: "{{ kodi_send_port }}"
  tags:
  - get_addons

- name: Set permissions on Kodi data directory
  file:
    path: "{{ kodi_data_dir }}"
    owner: "{{ kodi_user }}"
  tags:
  - configure
  - get_addons

- name: Get addons for upload
  set_fact:
    kodi_addons_upload: "{{ (kodi_addons_upload | default([])) + ([lookup('first_found', ('addons/' + item), skip=True, errors='ignore')] | flatten) }}"
  with_items: "{{ kodi_addon_names | select('match', '^repository.') | list }}"
  tags:
  - get_addons

- name: Copy Kodi repository addons
  copy:
    src: "{{ item }}"
    dest: "{{ kodi_data_dir }}/addons"
    owner: "{{ kodi_user }}"
  with_items: "{{ kodi_addons_upload | default([]) }}"
  tags:
  - get_addons

- name: Get addon settings for upload
  set_fact:
    kodi_addon_settings_upload: "{{ (kodi_addon_settings_upload | default([])) + ([lookup('first_found', ('addon_data/' + item), skip=True, errors='ignore')] | flatten) }}"
  with_items: "{{ kodi_addon_names }}"
  tags:
  - copy_addon_settings

- name: Copy addon settings
  copy:
    src: "{{ item }}"
    dest: "{{ kodi_data_dir }}/userdata/addon_data"
    owner: "{{ kodi_user }}"
  with_items: "{{ kodi_addon_settings_upload | default([]) }}"
  tags:
  - copy_addon_settings

- name: Create directories for xml files
  file:
    path: "{{ kodi_data_dir }}/{{ item }}"
    state: directory
  with_items: "{{ kodi_config_final | map(attribute='file') | map('dirname') | unique }}"
  tags: configure

- name: Check if xml config files exist
  stat:
    path: "{{ kodi_data_dir }}/{{ item }}"
  with_items: "{{ kodi_config_final | map(attribute='file') | unique }}"
  tags: configure
  register: stat_result

- name: Create empty xml setting file if needed
  copy:
    content: "<settings></settings>"
    dest: "{{ kodi_data_dir }}/{{ item }}"
  with_items: "{{ stat_result.results | selectattr('stat.exists', 'false') | map(attribute='item') | list }}"
  tags: configure

- block:
  - name: "Test if Ansible 'xml' module prerequisites are available"
    command: "{{ ansible_python.executable | default(ansible_python_interpreter) | quote }} -c 'import lxml'"
    changed_when: False
    tags: configure
  - include_tasks:
      file: configure.yml
  rescue:
  - include_tasks:
      file: configure_libreelec.yml

- name: Apply correct ownership to Kodi data directory
  file:
    path: "{{ kodi_data_dir }}"
    state: directory
    recurse: True
    owner: "{{ kodi_user }}"
  tags:
  - configure
  - copy_addon_settings
  - get_addons

- name: Slurp favourites from master installation
  slurp:
    src: "{{ kodi_master_kodi_data_dir }}/userdata/favourites.xml"
  register: favourites
  delegate_to: "{{ kodi_master_installation }}"
  when: 'kodi_copy_favourites | default(False) | bool'
  tags: transfer_favourites

- name: Slurp RSS feeds from master installation
  slurp:
    src: "{{ kodi_master_kodi_data_dir }}/userdata/RssFeeds.xml"
  register: rssfeeds
  delegate_to: "{{ kodi_master_installation }}"
  when: 'kodi_copy_feeds | default(False) | bool'
  tags: transfer_feeds

- name: Transfer favourites from master installation
  copy:
    content: "{{ favourites['content'] | b64decode }}"
    dest: "{{ kodi_data_dir }}/userdata/favourites.xml"
    backup: True
  when: 'kodi_copy_favourites | default(False) | bool'
  tags: transfer_favourites

- name: Transfer RSS feeds from master installation
  copy:
    content: "{{ favourites['content'] | b64decode }}"
    dest: "{{ kodi_data_dir }}/userdata/RSSFeeds.xml"
    backup: True
  when: 'kodi_copy_feeds | default(True) | bool'
  tags: transfer_feeds

- name: Start Kodi via service
  service:
    name: "{{ kodi_service | default(omit) }}"
    state: started
  when: "kodi_service_enabled | bool"
  tags:
  - configure
